import { Button, Grid, Checkbox, FormControlLabel, TextField, Box, MenuItem } from "@mui/material";
import EnhancedTextField from "./components/EnhancedTextField";
import { useEffect, useState } from "react";
import { createImageGivenOpportunity, createImagePromptFromForm } from "../../functions/OpenAi";
import MagicButton from "../components/MagicButton";
import EnhancedImageField from "./components/EnhancedImageField";

const AutoGenerated = (props) => {
    const [imageURLs, setImageURLs] = useState([]);
    const [imagesLoading, setImagesLoading] = useState(false);
    const [promptUsed, setPromptUsed] = useState("");
    const [promptLoading, setPromptLoading] = useState("");

    useEffect(() => {
        setPromptUsed(props.formData.title || "A cute tabby playing the guitar");
    }, []);

    // Generate a prompt from the form provided
    const generatePromptGivenFormData = async () => {
        setPromptLoading(true);
        console.log(props.formData);
        await createImagePromptFromForm(props.formData)
            .then((imagePrompt) => {
                if (imagePrompt) {
                    setPromptUsed(imagePrompt);
                    console.log("Improved image prompt: ", imagePrompt);
                } else {
                    console.log("Error passing form content!");
                }
            })
            .finally(() => {
                setPromptLoading(false);
            });
    };

    // Use Dall E 2 to generate prompt images
    const generateImagesAutomatically = async () => {
        setImagesLoading(true);
        console.log("promptUsed: ", promptUsed);
        await createImageGivenOpportunity(promptUsed)
            .then((urls) => {
                if (!urls) {
                    setImagesLoading(false);
                    console.log("Error loading images!");
                    return;
                }
                console.log("urls: ", urls);
                setImageURLs(urls.map((item) => item.url));
            })
            .finally(() => {
                setImagesLoading(false);
            });
    };

    // Generate a LinkedIn post given formdata
    const generateLinkedInPost = async () => {
        setImagesLoading(true);
        console.log("promptUsed: ", promptUsed);
        await createImageGivenOpportunity(promptUsed)
            .then((urls) => {
                if (!urls) {
                    setImagesLoading(false);
                    console.log("Error loading images!");
                    return;
                }
                console.log("urls: ", urls);
                setImageURLs(urls.map((item) => item.url));
            })
            .finally(() => {
                setImagesLoading(false);
            });
    };
    return (
        <Box sx={{ width: "50%", flexDirection: "column" }}>
            <Box
                sx={{
                    margin: "10px",
                    borderBottom: "1px solid",
                    borderColor: "divider",
                    display: "flex",
                    justifyContent: "center",
                    flexDirection: "column",
                    alignItems: "center",
                }}
            >
                <Box
                    sx={{
                        margin: "10px",
                        borderBottom: "1px solid",
                        borderColor: "divider",
                        display: "flex",
                        justifyContent: "center",
                        width: "100%",
                    }}
                >
                    <TextField
                        margin="normal"
                        name="prompt"
                        label="Prompt for image creation"
                        value={promptUsed}
                        onChange={(e) => {
                            setPromptUsed(e.target.value);
                        }}
                        fullWidth
                    />
                    <MagicButton text="↻" loading={promptLoading} onClick={generatePromptGivenFormData} />
                </Box>
                <Box
                    sx={{
                        margin: "10px",
                        borderBottom: "1px solid",
                        borderColor: "divider",
                        display: "flex",
                        justifyContent: "center",
                    }}
                >
                    <MagicButton
                        text="✨ Generate Images ✨"
                        loading={imagesLoading}
                        onClick={generateImagesAutomatically}
                        style={{ float: "right" }}
                    />
                </Box>
                <Box
                    sx={{
                        display: "grid",
                        gridTemplateColumns: "repeat(2, 1fr)",
                        gap: "10px",
                    }}
                >
                    {imageURLs.map((image_URL, index) => (
                        <EnhancedImageField
                            onClick={() => {
                                props.setImage(image_URL);
                            }}
                            selected={props.image === image_URL}
                            key={index}
                            src={image_URL}
                        />
                    ))}
                </Box>
            </Box>
            {props.childElements}
        </Box>
    );
};

export default AutoGenerated;
